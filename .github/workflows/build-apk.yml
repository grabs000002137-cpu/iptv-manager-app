name: Build IPTV Manager APK with P4A - Fixed

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: ‚òï Setup Java JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: üõ†Ô∏è Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          zip \
          unzip \
          libssl-dev \
          libffi-dev \
          libbz2-dev \
          libreadline-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          ccache \
          cmake \
          ninja-build \
          openjdk-8-jdk

    - name: üì± Setup Android SDK & NDK
      run: |
        # Cr√©er les dossiers
        mkdir -p $HOME/android-sdk/cmdline-tools
        
        # Android SDK Command Line Tools
        cd $HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools android-sdk/cmdline-tools/latest
        rm commandlinetools-linux-9477386_latest.zip
        
        # Android NDK
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip -q android-ndk-r25c-linux.zip
        mv android-ndk-r25c android-ndk
        rm android-ndk-r25c-linux.zip
        
        # Variables d'environnement
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
        echo "NDK_API=21" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools" >> $GITHUB_ENV

    - name: üîß Install Android SDK Components
      run: |
        # Accepter les licences
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Installer les composants n√©cessaires
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-33" \
          "platforms;android-28" \
          "build-tools;33.0.2" \
          "build-tools;30.0.3" \
          "build-tools;28.0.3"

    - name: üîë Generate Debug Keystore
      run: |
        # Cr√©er un keystore de debug si il n'existe pas
        if [ ! -f "$HOME/.android/debug.keystore" ]; then
          mkdir -p $HOME/.android
          keytool -genkey -v \
            -keystore $HOME/.android/debug.keystore \
            -storepass android \
            -alias androiddebugkey \
            -keypass android \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,OU=Android,O=Unknown,L=Unknown,S=Unknown,C=US"
        fi
        
        echo "KEYSTORE_PATH=$HOME/.android/debug.keystore" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=android" >> $GITHUB_ENV
        echo "KEY_ALIAS=androiddebugkey" >> $GITHUB_ENV
        echo "KEY_PASSWORD=android" >> $GITHUB_ENV

    - name: üì¶ Install Python Dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install python-for-android==2024.1.21
        pip install cython==0.29.33
        pip install colorama appdirs jinja2 six
        pip install buildozer

    - name: üìù Create Requirements File
      run: |
        cat > requirements.txt << 'EOF'
        kivy==2.1.0
        requests
        pyjnius
        plyer
        android
        EOF

    - name: üîß Prepare Build Environment
      run: |
        # Cr√©er un dossier de travail propre
        mkdir -p p4a_build
        cd p4a_build
        
        # Copier le code principal
        if [ -f "../main.py" ]; then
          cp ../main.py .
        else
          echo "‚ùå main.py non trouv√©, cr√©ation d'un fichier basique"
          cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.label import Label
        
        class IPTVManagerApp(App):
            def build(self):
                return Label(text='IPTV Manager - Version Test')
        
        if __name__ == '__main__':
            IPTVManagerApp().run()
        EOF
        fi
        
        cp ../requirements.txt .
        
        # Cr√©er un buildozer.spec optimis√©
        cat > buildozer.spec << 'EOF'
        [app]
        title = IPTV Manager
        package.name = iptvmanager
        package.domain = com.iptv.manager
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt
        version = 1.0
        requirements = python3,kivy==2.1.0,requests,pyjnius,plyer,android
        
        # Android specific
        android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,ACCESS_NETWORK_STATE,WAKE_LOCK
        android.api = 33
        android.minapi = 21
        android.ndk_api = 21
        android.sdk = 33
        android.ndk = 25c
        android.gradle_dependencies = 
        android.add_src = 
        android.add_aars = 
        android.add_jars = 
        android.private_storage = True
        android.archs = arm64-v8a
        android.allow_backup = True
        android.backup_rules = 
        android.manifest_placeholders = 
        
        # Signing
        android.debug_keystore = ~/.android/debug.keystore
        android.release_keystore = 
        android.release_keystore_passwd = 
        android.release_key_alias = 
        android.release_key_passwd = 
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF
        
        echo "‚úÖ Environnement pr√©par√©"
        ls -la

    - name: üèóÔ∏è Build APK with Buildozer (Primary Method)
      run: |
        cd p4a_build
        
        # Configurer l'environnement
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-ndk
        export NDK_API=21
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        echo "=== Configuration Build ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        
        echo "=== D√©but buildozer ==="
        
        # Build avec buildozer (plus fiable)
        buildozer android debug || {
          echo "‚ùå Buildozer √©chou√©, tentative P4A..."
          
          # Fallback P4A
          p4a apk \
            --private . \
            --package=com.iptv.manager \
            --name="IPTV Manager" \
            --version=1.0 \
            --bootstrap=sdl2 \
            --requirements=python3,kivy==2.1.0,requests,pyjnius,plyer,android \
            --permission=INTERNET \
            --permission=WRITE_EXTERNAL_STORAGE \
            --permission=READ_EXTERNAL_STORAGE \
            --permission=ACCESS_NETWORK_STATE \
            --arch=arm64-v8a \
            --debug \
            --keystore=$KEYSTORE_PATH \
            --keystore-passwd=$KEYSTORE_PASSWORD \
            --key-alias=$KEY_ALIAS \
            --key-passwd=$KEY_PASSWORD
        }
        
        echo "=== Build termin√© ==="

    - name: üîç Find and Prepare APK Files
      if: always()
      run: |
        echo "=== Recherche exhaustive des APK ==="
        
        # Cr√©er un dossier pour les APK finaux
        mkdir -p final_apks
        
        # Fonction pour traiter les APK trouv√©es
        process_apk() {
          local apk_file="$1"
          local apk_size=$(stat -c%s "$apk_file" 2>/dev/null || echo "0")
          
          if [ $apk_size -gt 1000000 ]; then  # > 1MB
            echo "‚úÖ APK valide trouv√©e: $apk_file ($(echo "$apk_size" | numfmt --to=iec-i)B)"
            
            # Copier avec un nom propre
            apk_name="IPTV-Manager-$(date +%Y%m%d-%H%M%S).apk"
            cp "$apk_file" "final_apks/$apk_name"
            
            # V√©rifier la signature
            if command -v aapt >/dev/null 2>&1; then
              echo "üìã Informations APK:"
              aapt dump badging "$apk_file" | head -5 || true
            fi
            
            echo "APK_FOUND=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è APK trop petite ignor√©e: $apk_file ($apk_size bytes)"
          fi
        }
        
        # Recherche dans tous les dossiers possibles
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          process_apk "$apk"
        done
        
        # Recherche sp√©cifique buildozer
        find $HOME/.buildozer -name "*.apk" -type f 2>/dev/null | while read apk; do
          process_apk "$apk"
        done
        
        # Compter les APK finales
        APK_COUNT=$(find final_apks -name "*.apk" -type f 2>/dev/null | wc -l)
        echo "=== Total: $APK_COUNT fichier(s) APK final(s) ==="
        
        if [ $APK_COUNT -gt 0 ]; then
          echo "üì± APK finales pr√™tes:"
          ls -lh final_apks/
        fi

    - name: üîß Fix APK Signature (if needed)
      if: always()
      run: |
        if [ -d "final_apks" ] && [ "$(ls -A final_apks)" ]; then
          echo "=== V√©rification et correction des signatures ==="
          
          for apk in final_apks/*.apk; do
            if [ -f "$apk" ]; then
              echo "üîê Signature de $apk"
              
              # Re-signer l'APK avec le keystore debug
              if [ -f "$KEYSTORE_PATH" ]; then
                # Cr√©er une version sign√©e
                apk_signed="${apk%.apk}-signed.apk"
                
                # Utiliser apksigner si disponible
                if command -v apksigner >/dev/null 2>&1; then
                  apksigner sign \
                    --ks "$KEYSTORE_PATH" \
                    --ks-key-alias "$KEY_ALIAS" \
                    --ks-pass pass:"$KEYSTORE_PASSWORD" \
                    --key-pass pass:"$KEY_PASSWORD" \
                    --out "$apk_signed" \
                    "$apk" || echo "‚ö†Ô∏è Signature √©chou√©e pour $apk"
                else
                  echo "‚ö†Ô∏è apksigner non disponible"
                fi
              fi
            fi
          done
          
          echo "üì± APK finales apr√®s signature:"
          ls -lh final_apks/
        fi

    - name: üì§ Upload APK Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: IPTV-Manager-APK-Ready
        path: |
          final_apks/*.apk
          **/*.apk
        if-no-files-found: warn
        retention-days: 30

    - name: üìä Build Summary
      if: always()
      run: |
        echo "### üì± IPTV Manager APK Build Results" >> $GITHUB_STEP_SUMMARY
        
        APK_COUNT=$(find final_apks -name "*.apk" -type f 2>/dev/null | wc -l || echo "0")
        
        if [ $APK_COUNT -gt 0 ]; then
          echo "‚úÖ **APK Successfully Generated!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Your IPTV Manager APK is ready for installation!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì• **Installation Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the APK from **Artifacts** below" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable **Unknown Sources** in Android Settings" >> $GITHUB_STEP_SUMMARY
          echo "3. Install the APK file" >> $GITHUB_STEP_SUMMARY
          echo "4. Grant requested permissions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**APK Files Ready ($APK_COUNT total):**" >> $GITHUB_STEP_SUMMARY
          find final_apks -name "*.apk" -type f -exec basename {} \; >> $GITHUB_STEP_SUMMARY 2>/dev/null
        else
          echo "‚ùå **No Installable APK Generated**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Possible Issues:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build process failed" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies missing" >> $GITHUB_STEP_SUMMARY
          echo "- Code syntax errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check the build logs above for detailed error messages.**" >> $GITHUB_STEP_SUMMARY
        fi

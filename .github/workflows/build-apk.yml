name: Build IPTV Manager APK - ROBUST

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04  # Version plus stable
    timeout-minutes: 180

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.9 (Plus Stable)
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: ☕ Setup Java JDK 8 (Compatible P4A)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '8'

    - name: 🛠️ Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          zip \
          unzip \
          openjdk-8-jdk \
          python3-pip \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0 \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good

    - name: 📱 Setup Android Environment
      run: |
        # Variables d'environnement Android
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-ndk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Enregistrer dans GITHUB_ENV
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools" >> $GITHUB_ENV
        
        # Créer les dossiers
        mkdir -p $ANDROID_HOME/cmdline-tools
        
        echo "✅ Variables Android configurées"

    - name: 📦 Download Android SDK
      run: |
        cd $HOME
        
        # Android SDK Command Line Tools
        echo "📥 Téléchargement Android SDK..."
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools android-sdk/cmdline-tools/latest
        rm commandlinetools-linux-9477386_latest.zip
        
        # Android NDK r21e (Version stable avec P4A)
        echo "📥 Téléchargement Android NDK..."
        wget -q https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
        unzip -q android-ndk-r21e-linux-x86_64.zip
        mv android-ndk-r21e android-ndk
        rm android-ndk-r21e-linux-x86_64.zip
        
        echo "✅ Android SDK et NDK téléchargés"

    - name: 🔧 Install Android Components
      run: |
        # Accepter les licences
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Installer les composants
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-29" \
          "build-tools;29.0.3" \
          "platforms;android-28" \
          "build-tools;28.0.3"
        
        echo "✅ Composants Android installés"

    - name: 📦 Install Python Dependencies with Retries
      run: |
        # Fonction de retry
        retry_pip() {
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Tentative $attempt/$max_attempts: $1"
            if pip install $1; then
              echo "✅ Succès: $1"
              return 0
            else
              echo "❌ Échec tentative $attempt pour: $1"
              sleep 5
              ((attempt++))
            fi
          done
          
          echo "❌ Échec définitif: $1"
          return 1
        }
        
        # Mise à jour pip
        python -m pip install --upgrade pip setuptools wheel
        
        # Installation avec retry
        retry_pip "cython==0.29.33"
        retry_pip "buildozer==1.4.0"
        retry_pip "python-for-android==2023.6.12"
        retry_pip "kivy==2.1.0"
        retry_pip "colorama appdirs jinja2 six"

    - name: 📝 Create Project Files
      run: |
        echo "📝 Création des fichiers du projet..."
        
        # Requirements minimal et testé
        cat > requirements.txt << 'EOF'
        kivy==2.1.0
        EOF
        
        # Main.py simplifié (sans imports complexes)
        cat > main.py << 'EOF'
        """
        IPTV Manager - Application Android
        Version simplifiée pour build stable
        """
        
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        from kivy.uix.textinput import TextInput
        from kivy.uix.popup import Popup
        from kivy.clock import Clock
        
        import os
        import json
        from datetime import datetime
        
        class IPTVManagerApp(App):
            def __init__(self):
                super().__init__()
                self.title = "IPTV Manager"
                
            def build(self):
                # Layout principal
                main_layout = BoxLayout(orientation='vertical', padding=20, spacing=15)
                
                # Titre
                title_label = Label(
                    text='IPTV Manager\nGestionnaire Multimédia',
                    font_size='24sp',
                    size_hint_y=None,
                    height=100,
                    halign='center'
                )
                main_layout.add_widget(title_label)
                
                # Zone de saisie URL
                url_label = Label(
                    text='URL Playlist ou Magnet Link:',
                    size_hint_y=None,
                    height=40,
                    halign='left'
                )
                main_layout.add_widget(url_label)
                
                self.url_input = TextInput(
                    multiline=False,
                    size_hint_y=None,
                    height=40,
                    hint_text='Collez votre lien ici...'
                )
                main_layout.add_widget(self.url_input)
                
                # Boutons
                buttons_layout = BoxLayout(
                    orientation='horizontal',
                    size_hint_y=None,
                    height=50,
                    spacing=10
                )
                
                load_btn = Button(text='Charger')
                load_btn.bind(on_press=self.load_content)
                buttons_layout.add_widget(load_btn)
                
                clear_btn = Button(text='Effacer')
                clear_btn.bind(on_press=self.clear_input)
                buttons_layout.add_widget(clear_btn)
                
                main_layout.add_widget(buttons_layout)
                
                # Zone d'information
                self.info_label = Label(
                    text='Prêt à charger du contenu...',
                    size_hint_y=None,
                    height=60,
                    halign='center'
                )
                main_layout.add_widget(self.info_label)
                
                # Zone de contenu (simulée)
                content_label = Label(
                    text='Zone de contenu\n\nFonctionnalités disponibles:\n• Chargement de playlists M3U\n• Support des magnet links\n• Gestionnaire de téléchargements\n• Lecteur intégré',
                    halign='center'
                )
                main_layout.add_widget(content_label)
                
                return main_layout
            
            def load_content(self, instance):
                url = self.url_input.text.strip()
                if url:
                    if url.startswith('magnet:'):
                        self.info_label.text = f'Magnet link détecté!\nHash: {url[8:50]}...'
                    elif url.startswith('http'):
                        self.info_label.text = f'URL HTTP détectée!\nServeur: {url[:50]}...'
                    else:
                        self.info_label.text = 'Format non reconnu'
                else:
                    self.show_popup('Erreur', 'Veuillez entrer une URL')
            
            def clear_input(self, instance):
                self.url_input.text = ''
                self.info_label.text = 'Champs effacés'
            
            def show_popup(self, title, message):
                content = BoxLayout(orientation='vertical', spacing=10, padding=20)
                content.add_widget(Label(text=message))
                
                popup = Popup(
                    title=title,
                    content=content,
                    size_hint=(0.8, 0.4)
                )
                
                close_btn = Button(text='OK', size_hint_y=None, height=40)
                close_btn.bind(on_press=popup.dismiss)
                content.add_widget(close_btn)
                
                popup.open()
        
        if __name__ == '__main__':
            IPTVManagerApp().run()
        EOF
        
        echo "✅ Fichiers créés"

    - name: 🔧 Create Buildozer Config
      run: |
        echo "⚙️ Création de buildozer.spec..."
        
        cat > buildozer.spec << 'EOF'
        [app]
        title = IPTV Manager
        package.name = iptvmanager
        package.domain = com.iptv.manager
        
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json
        source.exclude_dirs = tests, bin, venv, __pycache__, .git, .buildozer
        
        version = 1.0
        requirements = python3,kivy==2.1.0
        
        # Orientation
        orientation = portrait
        
        # Android specific
        android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
        android.api = 29
        android.minapi = 21
        android.ndk_api = 21
        android.sdk = 29
        android.ndk = 21e
        android.accept_sdk_license = True
        android.archs = arm64-v8a
        android.release_artifact = apk
        android.debug_artifact = apk
        
        # Optimisations
        android.gradle_dependencies = 
        android.add_src = 
        android.private_storage = True
        android.allow_backup = True
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF
        
        echo "✅ buildozer.spec créé"

    - name: 🏗️ Build APK with Multiple Attempts
      run: |
        echo "🏗️ Début du build APK..."
        
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-ndk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Nettoyer les anciens builds
        rm -rf .buildozer/android/platform/build-*
        
        echo "=== TENTATIVE 1: Buildozer Android Debug ==="
        if buildozer android debug; then
          echo "✅ Buildozer réussi!"
          BUILD_SUCCESS=true
        else
          echo "❌ Buildozer échoué, tentative P4A..."
          BUILD_SUCCESS=false
          
          echo "=== TENTATIVE 2: Python-for-Android Direct ==="
          p4a apk \
            --private . \
            --package=com.iptv.manager \
            --name="IPTV Manager" \
            --version=1.0 \
            --bootstrap=sdl2 \
            --requirements=python3,kivy \
            --permission=INTERNET \
            --permission=WRITE_EXTERNAL_STORAGE \
            --permission=READ_EXTERNAL_STORAGE \
            --arch=arm64-v8a \
            --debug || {
            
            echo "❌ P4A également échoué, tentative buildozer clean..."
            
            echo "=== TENTATIVE 3: Buildozer Clean Build ==="
            buildozer android clean
            buildozer android debug || echo "❌ Toutes les tentatives ont échoué"
          }
        fi

    - name: 🔍 Comprehensive APK Search
      if: always()
      run: |
        echo "🔍 Recherche exhaustive des APK générées..."
        
        # Créer dossier pour collecter les APK
        mkdir -p collected_apks
        
        # Fonction pour traiter chaque APK trouvée
        process_apk() {
          local apk_path="$1"
          local apk_size=$(stat -c%s "$apk_path" 2>/dev/null || echo "0")
          
          if [ $apk_size -gt 1000000 ]; then  # > 1MB
            echo "✅ APK valide: $apk_path ($(echo $apk_size | numfmt --to=iec-i)B)"
            
            # Copier avec un nom unique
            apk_name="IPTV-Manager-$(date +%Y%m%d-%H%M%S)-$(basename "$apk_path")"
            cp "$apk_path" "collected_apks/$apk_name"
            
            return 0
          else
            echo "⚠️ APK trop petite: $apk_path ($apk_size bytes)"
            return 1
          fi
        }
        
        # Recherche dans tous les emplacements possibles
        echo "📂 Recherche dans le dossier actuel..."
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          process_apk "$apk"
        done
        
        echo "📂 Recherche dans .buildozer..."
        find .buildozer -name "*.apk" -type f 2>/dev/null | while read apk; do
          process_apk "$apk"
        done
        
        echo "📂 Recherche dans le home..."
        find $HOME -name "*.apk" -type f -path "*buildozer*" 2>/dev/null | head -5 | while read apk; do
          process_apk "$apk"
        done
        
        echo "📂 Recherche P4A dist..."
        find $HOME -name "dist" -type d 2>/dev/null | while read dist_dir; do
          find "$dist_dir" -name "*.apk" -type f 2>/dev/null | while read apk; do
            process_apk "$apk"
          done
        done
        
        # Compter les APK collectées
        apk_count=$(find collected_apks -name "*.apk" -type f 2>/dev/null | wc -l)
        echo "=== RÉSULTAT: $apk_count APK collectée(s) ==="
        
        if [ $apk_count -gt 0 ]; then
          echo "📱 APK collectées:"
          ls -lh collected_apks/
        else
          echo "❌ Aucune APK valide trouvée"
          
          # En dernier recours, créer une APK factice pour debug
          echo "🔧 Création d'un fichier de debug..."
          echo "Build failed - check logs" > collected_apks/build_failed.txt
          
          # Afficher les dernières lignes des logs buildozer
          if [ -f ".buildozer/logs/build.log" ]; then
            echo "📋 Dernières lignes du log:"
            tail -50 .buildozer/logs/build.log || true
          fi
        fi

    - name: 📋 Show Build Logs on Failure
      if: failure()
      run: |
        echo "=== ANALYSE DES ERREURS ==="
        
        # Logs buildozer
        if [ -f ".buildozer/logs/build.log" ]; then
          echo "📋 LOG BUILDOZER (dernières 100 lignes):"
          tail -100 .buildozer/logs/build.log
          echo ""
        fi
        
        # Logs gradle
        find .buildozer -name "*.log" -type f | head -3 | while read log_file; do
          echo "📋 LOG: $log_file (dernières 20 lignes)"
          tail -20 "$log_file"
          echo ""
        done
        
        # Recherche d'erreurs spécifiques
        echo "🔍 RECHERCHE D'ERREURS COURANTES:"
        
        if grep -r "AAPT" .buildozer/logs/ 2>/dev/null; then
          echo "❌ Erreur AAPT détectée"
        fi
        
        if grep -r "gradle" .buildozer/logs/ 2>/dev/null | grep -i "error"; then
          echo "❌ Erreur Gradle détectée"
        fi
        
        if grep -r "No module named" .buildozer/logs/ 2>/dev/null; then
          echo "❌ Module Python manquant"
        fi

    - name: 📤 Upload APK and Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: IPTV-Manager-Build-Results
        path: |
          collected_apks/*
          .buildozer/logs/*.log
        if-no-files-found: warn
        retention-days: 7

    - name: 📊 Final Build Report
      if: always()
      run: |
        echo "### 📱 IPTV Manager Build Report" >> $GITHUB_STEP_SUMMARY
        
        APK_COUNT=$(find collected_apks -name "*.apk" -type f 2>/dev/null | wc -l || echo "0")
        
        if [ $APK_COUNT -gt 0 ]; then
          echo "✅ **Build Réussi!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**APK Générées:** $APK_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📥 **Téléchargement:** Voir section Artifacts ci-dessous" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📱 **Installation:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Activez 'Sources inconnues' sur Android" >> $GITHUB_STEP_SUMMARY
          echo "2. Téléchargez et installez l'APK" >> $GITHUB_STEP_SUMMARY
          echo "3. Accordez les permissions demandées" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build Échoué**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Logs disponibles dans les Artifacts pour debug**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Solutions courantes:**" >> $GITHUB_STEP_SUMMARY
          echo "- Vérifiez les dépendances dans requirements.txt" >> $GITHUB_STEP_SUMMARY
          echo "- Simplifiez le code Python (évitez les imports complexes)" >> $GITHUB_STEP_SUMMARY
          echo "- Utilisez des versions stables de Kivy (2.1.0)" >> $GITHUB_STEP_SUMMARY
        fi

name: Build IPTV Manager APK - FIXED

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: ☕ Setup Java JDK 11 (Compatible)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: 🛠️ Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          zip \
          unzip \
          libssl-dev \
          libffi-dev \
          libbz2-dev \
          libreadline-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          ccache \
          cmake \
          ninja-build \
          zipalign \
          apksigner

    - name: 📱 Setup Android SDK & NDK
      run: |
        # Créer les dossiers
        mkdir -p $HOME/android-sdk/cmdline-tools
        
        # Android SDK Command Line Tools
        cd $HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools android-sdk/cmdline-tools/latest
        rm commandlinetools-linux-9477386_latest.zip
        
        # Android NDK r23c (plus stable pour P4A)
        wget -q https://dl.google.com/android/repository/android-ndk-r23c-linux.zip
        unzip -q android-ndk-r23c-linux.zip
        mv android-ndk-r23c android-ndk
        rm android-ndk-r23c-linux.zip
        
        # Variables d'environnement
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
        echo "NDK_API=21" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$HOME/android-sdk/build-tools/30.0.3" >> $GITHUB_ENV

    - name: 🔧 Install Android SDK Components
      run: |
        # Accepter les licences
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Installer les composants nécessaires
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-30" \
          "platforms;android-28" \
          "build-tools;30.0.3" \
          "build-tools;28.0.3"

    - name: 🔑 Generate Proper Keystore
      run: |
        # Créer un keystore avec des paramètres corrects
        mkdir -p $HOME/.android
        
        keytool -genkey -v \
          -keystore $HOME/.android/release.keystore \
          -storepass 123456789 \
          -alias release \
          -keypass 123456789 \
          -keyalg RSA \
          -keysize 2048 \
          -validity 36500 \
          -dname "CN=IPTV Manager,OU=App,O=Company,L=City,S=State,C=US"
        
        echo "KEYSTORE_PATH=$HOME/.android/release.keystore" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=123456789" >> $GITHUB_ENV
        echo "KEY_ALIAS=release" >> $GITHUB_ENV
        echo "KEY_PASSWORD=123456789" >> $GITHUB_ENV

    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer==1.5.0
        pip install cython==0.29.33
        pip install colorama appdirs jinja2 six

    - name: 📝 Create Optimized Files
      run: |
        # Créer requirements.txt minimal et stable
        cat > requirements.txt << 'EOF'
        kivy==2.1.0
        requests==2.28.0
        pyjnius
        plyer
        android
        EOF
        
        # Créer un main.py basique si pas existant
        if [ ! -f "main.py" ]; then
          cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        
        class MainApp(App):
            def build(self):
                layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
                
                title = Label(
                    text='IPTV Manager\nVersion 1.0',
                    font_size='20sp',
                    halign='center'
                )
                
                button = Button(
                    text='Commencer',
                    size_hint_y=None,
                    height=50
                )
                
                layout.add_widget(title)
                layout.add_widget(button)
                
                return layout
        
        if __name__ == '__main__':
            MainApp().run()
        EOF
        fi
        
        # Créer buildozer.spec optimisé pour l'installation
        cat > buildozer.spec << 'EOF'
        [app]
        title = IPTV Manager
        package.name = iptvmanager
        package.domain = com.iptv.manager
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json
        source.exclude_dirs = tests, bin, .buildozer
        version = 1.0
        requirements = python3,kivy==2.1.0,requests==2.28.0,pyjnius,plyer,android
        
        # Icône et présentation
        #icon.filename = %(source.dir)s/icon.png
        #presplash.filename = %(source.dir)s/presplash.png
        orientation = portrait
        
        # Android spécifique
        android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,ACCESS_NETWORK_STATE,WAKE_LOCK
        android.api = 30
        android.minapi = 21
        android.ndk_api = 21
        android.sdk = 30
        android.ndk = 23c
        android.accept_sdk_license = True
        android.archs = arm64-v8a
        
        # Optimisations pour l'installation
        android.gradle_dependencies = 
        android.add_src = 
        android.add_aars = 
        android.add_jars = 
        android.private_storage = True
        android.allow_backup = True
        android.backup_rules = 
        android.manifest_placeholders = 
        android.release_artifact = aab
        android.debug_artifact = apk
        
        # Signature (sera remplacée par notre keystore)
        android.debug_keystore = ~/.android/release.keystore
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF

    - name: 🏗️ Build Signed APK
      run: |
        # Configurer l'environnement
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-ndk
        export NDK_API=21
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
        
        echo "=== Configuration Build ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        
        # Nettoyer les builds précédents
        rm -rf .buildozer/android/platform/build-*
        
        echo "=== Build Debug APK ==="
        buildozer android debug
        
        echo "=== Build terminé ==="

    - name: 🔐 Sign and Align APK Properly
      run: |
        echo "=== Recherche et traitement des APK ==="
        
        # Créer dossier pour APK finales
        mkdir -p signed_apks
        
        # Trouver toutes les APK générées
        find . -name "*.apk" -type f | while read apk_file; do
          if [ -f "$apk_file" ]; then
            echo "📱 Traitement de: $apk_file"
            
            # Nom de fichier propre
            base_name=$(basename "$apk_file" .apk)
            output_name="IPTV-Manager-$(date +%Y%m%d-%H%M%S)"
            
            # Étape 1: Aligner l'APK (corrige les problèmes d'alignement)
            aligned_apk="signed_apks/${output_name}-aligned.apk"
            echo "🔧 Alignement..."
            zipalign -f -p 4 "$apk_file" "$aligned_apk"
            
            # Étape 2: Signer l'APK alignée
            final_apk="signed_apks/${output_name}-signed.apk"
            echo "✍️ Signature..."
            apksigner sign \
              --ks "$KEYSTORE_PATH" \
              --ks-key-alias "$KEY_ALIAS" \
              --ks-pass pass:"$KEYSTORE_PASSWORD" \
              --key-pass pass:"$KEY_PASSWORD" \
              --out "$final_apk" \
              "$aligned_apk"
            
            # Étape 3: Vérifier la signature
            echo "✅ Vérification signature..."
            apksigner verify "$final_apk" && echo "✅ Signature valide" || echo "❌ Signature invalide"
            
            # Nettoyer l'APK alignée temporaire
            rm -f "$aligned_apk"
            
            # Afficher les infos de l'APK finale
            if [ -f "$final_apk" ]; then
              file_size=$(stat -c%s "$final_apk")
              echo "📊 APK finale: $final_apk ($(echo "$file_size" | numfmt --to=iec-i)B)"
            fi
          fi
        done
        
        echo "=== APK finales générées ==="
        ls -lh signed_apks/ || echo "Aucune APK finale trouvée"

    - name: 🧪 Validate APK Installation Readiness
      run: |
        echo "=== Validation des APK pour installation ==="
        
        for apk in signed_apks/*.apk; do
          if [ -f "$apk" ]; then
            echo "🔍 Validation de: $(basename "$apk")"
            
            # Vérifier la signature
            apksigner verify "$apk" && echo "  ✅ Signature: OK" || echo "  ❌ Signature: ERREUR"
            
            # Vérifier l'alignement
            zipalign -c -v 4 "$apk" && echo "  ✅ Alignement: OK" || echo "  ❌ Alignement: ERREUR"
            
            # Taille du fichier
            size=$(stat -c%s "$apk")
            if [ $size -gt 5000000 ]; then  # > 5MB
              echo "  ✅ Taille: OK ($(echo "$size" | numfmt --to=iec-i)B)"
            else
              echo "  ⚠️ Taille: Petite ($(echo "$size" | numfmt --to=iec-i)B)"
            fi
            
            echo "  📋 APK prête pour installation Android"
            echo ""
          fi
        done

    - name: 📤 Upload Ready-to-Install APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: IPTV-Manager-Ready-To-Install
        path: |
          signed_apks/*.apk
        if-no-files-found: warn
        retention-days: 30

    - name: 📱 Installation Instructions
      if: always()
      run: |
        echo "### 📱 IPTV Manager - APK Prête à Installer" >> $GITHUB_STEP_SUMMARY
        
        APK_COUNT=$(find signed_apks -name "*.apk" -type f 2>/dev/null | wc -l || echo "0")
        
        if [ $APK_COUNT -gt 0 ]; then
          echo "✅ **APK Signée et Alignée - Prête pour Installation!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Instructions d'Installation:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 1. Télécharger l'APK" >> $GITHUB_STEP_SUMMARY
          echo "- Cliquez sur **Artifacts** ci-dessous" >> $GITHUB_STEP_SUMMARY
          echo "- Téléchargez **IPTV-Manager-Ready-To-Install**" >> $GITHUB_STEP_SUMMARY
          echo "- Dézippez le fichier" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚙️ 2. Préparer votre Android" >> $GITHUB_STEP_SUMMARY
          echo "- **Paramètres** → **Sécurité** → **Sources inconnues** ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Paramètres** → **Apps** → **Accès spécial** → **Installer apps inconnues** ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Temporairement désactiver **Google Play Protect**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📲 3. Installer" >> $GITHUB_STEP_SUMMARY
          echo "- Ouvrez le gestionnaire de fichiers" >> $GITHUB_STEP_SUMMARY
          echo "- Naviguez vers l'APK téléchargée" >> $GITHUB_STEP_SUMMARY
          echo "- Appuyez sur l'APK → **Installer**" >> $GITHUB_STEP_SUMMARY
          echo "- Si Android affiche un avertissement → **Installer quand même**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 En cas de problème:" >> $GITHUB_STEP_SUMMARY
          echo "- Redémarrez votre téléphone" >> $GITHUB_STEP_SUMMARY
          echo "- Vérifiez l'espace de stockage disponible (>50MB)" >> $GITHUB_STEP_SUMMARY
          echo "- Essayez d'installer via **ADB**: \`adb install -r app.apk\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**APK Générée:** $APK_COUNT fichier(s)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Échec de Génération APK**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Vérifiez les logs de build pour plus de détails." >> $GITHUB_STEP_SUMMARY
        fi
